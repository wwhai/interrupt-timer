// #include <stdio.h>
// #include <setjmp.h>
// #include <stdint.h>

// #define TASK_MAX_NUM 10

// #define ALWAYS_INLINE static inline __attribute__((always_inline))
// int os_setjmp(jmp_buf context) __asm("_setjmp");

// typedef enum
// {
//     NEW = 0,
//     READY,
//     RUN,
//     BLOCK
// } TASK_STATE;

// typedef struct
// {
//     unsigned char task_id; // 任务ID
//     unsigned int delay;    // 任务调度周期
//     jmp_buf context;       // 任务上下文
//     TASK_STATE state;      // 任务当前状态
//     void (*pFunc)();       // 任务函数指针
// } task_t;

// task_t task_array[TASK_MAX_NUM] = {};
// jmp_buf os_context;

// static volatile unsigned char current_task_num = 0;
// volatile unsigned char current_task = 0;

// void os_tick_handler(void)
// {
//     for (uint8_t i = 0; i < current_task_num; i++)
//     {
//         if (task_array[i].delay)
//         {
//             task_array[i].delay--;
//         }
//     }
// }

// void os_task_create(void (*pFunc)(void))
// {
//     if (!pFunc)
//     {
//         return;
//     }

//     if (current_task_num < TASK_MAX_NUM)
//     {
//         task_array[current_task_num].state = NEW;
//         task_array[current_task_num].delay = 0;
//         task_array[current_task_num].pFunc = pFunc;
//         current_task_num++;
//     }
// }

// ALWAYS_INLINE void os_task_yield(void)
// {
//     // os_setjmp(task_array[current_task].context) ? 0 : longjmp(os_context, 1);

//     if (!os_setjmp(task_array[current_task].context))
//     {
//         longjmp(os_context, 1);
//     }
// }

// ALWAYS_INLINE void os_task_delay(unsigned int time)
// {
//     task_array[current_task].delay = time;
//     task_array[current_task].state = BLOCK;
//     os_task_yield();
// }

// void os_task_sched(void)
// {
//     for (current_task = 0;; ++current_task == current_task_num ? current_task = 0 : 0)
//     {
//         if (os_setjmp(os_context))
//         {
//             continue;
//         }

//         switch (task_array[current_task].state)
//         {
//         case NEW:
//         {
//             task_array[current_task].state = RUN;
//             task_array[current_task].pFunc();
//             os_task_yield();
//             break;
//         }
//         case RUN:
//         {
//             longjmp(task_array[current_task].context, 1);
//             break;
//         }
//         case BLOCK:
//         {
//             if (task_array[current_task].delay == 0)
//             {
//                 task_array[current_task].state = RUN;
//                 longjmp(task_array[current_task].context, 1);
//             }
//             break;
//         }
//         default:
//             os_task_yield();
//         }
//         os_tick_handler();
//     }
// }

// void task1(void)
// {
//     // for (int i = 0; i != 5; ++i)
//     // {
//     //     printf("%s\n", "task1");
//     //     os_task_delay(2000);
//     // }
//     while (1)
//     {
//     }
// }

// void task2(void)
// {
//     for (int i = 0; i != 5; ++i)
//     {
//         printf("%s\n", "task2");
//         os_task_delay(10);
//     }
// }

// int main(int argc, char *argv[])
// {
//     os_task_create(task1);
//     os_task_create(task2);
//     os_task_sched();
//     return 0;
// }
